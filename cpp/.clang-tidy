---
# Clang-Tidy configuration for this project
# Focus: correctness (clang-analyzer, bugprone), performance, and pragmatic readability/modernize suggestions
# Assumes C++14 (project uses std::make_unique, etc.)

Checks: >
  -*,
  clang-analyzer-*,
  bugprone-*,
  performance-*,
  readability-*,
  modernize-use-nullptr,
  modernize-use-override,
  modernize-deprecated-headers,
  modernize-loop-convert,
  modernize-raw-string-literal,
  modernize-redundant-void-arg,
  modernize-return-braced-init-list,
  misc-*,
  -readability-identifier-naming,
  -readability-magic-numbers,
  -readability-function-cognitive-complexity,
  -modernize-use-trailing-return-type,
  -modernize-avoid-c-arrays

# Treat no checks as errors by default; adjust to taste
WarningsAsErrors: ''

# Use project style if .clang-format exists; otherwise fallback to LLVM
FormatStyle: file

# Ensure clang-tidy parses as C++14
ExtraArgsBefore: ['-std=c++14']

# Handy toggles
User: ibkr-austria

CheckOptions:
  # Keep implicit-bool conversion warnings reasonable in legacy codebases
  - key: readability-implicit-bool-conversion.AllowIntegerConditions
    value: '1'
  - key: readability-implicit-bool-conversion.AllowPointerConditions
    value: '1'
  # Prefer reasonable confidence for loop-convert to reduce noise
  - key: modernize-loop-convert.MinConfidence
    value: reasonable
  # Avoid flagging intentional by-value parameters for small types
  - key: performance-unnecessary-value-param.AllowedTypes
    value: 'std::string;std::string_view'
